# &
# AND operator
# |
# OR operator
# !
#NOT operator

x <- -10
y <- 5
x < 0 & x > -20 #AND requires everything to be TRUE
# returns TRUE
x > 0 | x < -1 # OR requires on condition to be TRUE to return T.
!(x == y)
#returns true
df <- mtcars
df[df$mpg > 20,] # returns subset of data where the MPG for a care meets the condition. 
df[df$mpg > 20 & df$mpg < 30,]

#subset can also be used.
subset(df, cyl > 6) # remeber subsets can be assigned to variables. 

#IF, ELSE, AND ELSE IF statements.

if (y == 5){
  #insert code
  print('great!')
}else if(y == 20){
  print('cool!')
}else{
  print('interesting')
}
#Write a script that will print "Even Number" if the variable x is an even number, otherwise print "Not Even"
x <- 20
if(x%%2==2){
  print('x is even')
}else{
  print('x is odd')
}
#Write a script that will print "Even Number" if the variable x is an even number, otherwise print "Not Even"
df <- data.frame(1:3, 4:6)
mx <- matrix( c(1:6), nrow=3, ncol=2, byrow = T)

if(is.matrix(df) == T){
  print(' This is a matrix')
} else{
  print('is not a matrix')
}

#Ex 3: Create a script that given a numeric vector x with a length 3, will print out the elements. You must use if,else if, and else statements for your logic. (This code will be relatively long)
xx <- c(3,2,8)
y <- c(1,3,6, 12)
mx <- matrix( c(1:6), nrow=3, ncol=2, byrow = T)
length(x)
if(is.vector(xx) == T){
  #print('working')  
  if(length(xx) == 3){
    print(xx)
  }else{
    print('Vector to loog or too short')
  }
}else{print('Is not is not a vector')}
#
#
#While loops
4%%2
x<-0
while( x < 10 ){
  if(x%%2 == 0){
    print(x)
    print("is even")
  }
  x <- x +1
}
#
#
#For loop
v<- c(1,2,3)
for (variable in v){
  print(variable)
}
mat <- matrix(1:25, nrow = 5)
for (row in 1:nrow(mat)){
  for(col in 1:ncol(mat)){
    print(paste('The element at row:', row, 'and col:', col, 'is',mat[row,col]))
  }
}
#
#
#Function example
name.of.function <- function(input1, input2, input3){
  result <- input1 + input2 - input3
  return(result)
}#example of function syntax. 


name.func <- function(name = 'Bill'){
  print(paste('hello',name))
}
name.func('John')
name.func()#uses the default if input is not specified. 

name.func1 <- function(name = 'Bill'){
  print.name <- paste('Hello',name)
  return(print.name)
}
zzz<-name.func1('Ted')
print(zzz)

#Ex 3: Create a function that accepts two arguments, an integer and a vector of integers. It returns the count of the number of occurences of the integer in the input vector.

v <- c(2,2,3)
funct2 <- num_count <- function(num,v){
  count = 0
  for (x in v){
    if (x == num){
      count = count + 1
    }
  }
  return(count)
}
funct2(x,v)

#Ex 4: We want to ship bars of aluminum. We will create a function that accepts an integer representing the requested kilograms of aluminum for the package to be shipped. To fullfill these order, we have small bars (1 kilogram each) and big bars (5 kilograms each). Return the least number of bars needed.

alum.func <- function(weight){
  if(weight%%1 == 0){
  five.kg <- weight/5
  one.kg <- weight%%5
  print(paste('Please ship', as.integer(five.kg), 'x 5kg bars, and', one.kg,'x 1kg bars'))
  }else { print('Error please input an integer that is a whole number.')
  
}
}
w <- as.integer(27)
alum.func(w)

